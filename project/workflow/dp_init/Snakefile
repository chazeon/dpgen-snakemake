configfile: "config.yml"

rule dp_init_target:
    input: 
        expand("dp_init/V{volume}/{iperturb:04d}",
            volume=config["eos"]["volumes"],
            iperturb=range(config["dp_init"]["perturb"]["number"])
        ),
        expand("dp_init/V{volume}/job-bundle.sh",
            volume=config["eos"]["volumes"])

rule init_md_run:
    wildcard_constraints:
        iperturb="\d+"
    output:
        directory("dp_init/V{volume}/{iperturb}"),
        INCAR=  "dp_init/V{volume}/{iperturb}/INCAR",
        POSCAR= "dp_init/V{volume}/{iperturb}/POSCAR",
        POTCAR= "dp_init/V{volume}/{iperturb}/POTCAR",
        KPOINTS="dp_init/V{volume}/{iperturb}/KPOINTS",
        job_sh="dp_init/V{volume}/{iperturb}/job.sh",
    input:
        INCAR=  expand("{templates}/INCAR", templates=config["dp_init"]["templates"]),
        KPOINTS=expand("{templates}/KPOINTS", templates=config["dp_init"]["templates"]),
        POSCAR="relax/V{volume}/CONTCAR",
        job_sh=expand("{templates}/job.sh", templates=config["dp_init"]["templates"]),
    params:
        supercell=config["dp_init"]["supercell"],
        elements=",".join(config["system"]["elements"]),
        potcars=[
            config["system"]["potcars"][elem]
            for elem in config["system"]["elements"]
        ]
    run:
        perturb_box=config["dp_init"]["perturb"]["box"] if int(wildcards.iperturb) != 0 else 0
        perturb_atom=config["dp_init"]["perturb"]["atom"] if int(wildcards.iperturb) != 0 else 0
    
        shell(
            '''
            cp {input.INCAR} {output.INCAR}
            cp {input.KPOINTS} {output.KPOINTS}
            cat {input.POSCAR} \\
            | python3 scripts/make-supercell.py -n {params.supercell} -t {params.elements} \\
            | python3 scripts/disturb-lattice.py --d-cell {perturb_box} --d-atom {perturb_atom} 1> {output.POSCAR}
            cat {params.potcars} 1> {output.POTCAR}
            cp {input.job_sh} {output.job_sh}
            '''
        )

rule job_bundle:
    input:
        job_sh=expand("{templates}/job-bundle.sh", templates=config["dp_init"]["templates"]),
    output:
        job_sh="dp_init/V{volume}/job-bundle.sh"
    shell:
        '''
        cp {input.job_sh} {output.job_sh}
        '''
